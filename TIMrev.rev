################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a GTR +I +G model.
#                   Every branch has one of the substitution models (mixture).
#
#
# authors: Sebastian Hoehna, Michael J. Landis, Tracy A. Heath and Bastien Boussau
#
################################################################################

data_name     = "neobmge.fas"
tree_name     = "LUCA_TIM_rooted_full.nwk"
analysis_name = "TIMASR8mix"

num_mixtures  = 8

#######################
# Reading in the Data #
#######################

"Reading in the data"

### Read in sequence data for both genes

data <- readDiscreteCharacterData("./" + data_name)
starting_tree <- readTrees("./" + tree_name)[1]

# Get some useful variables from the data. We need these later on.
n_species  <- data.ntaxa()
n_branches <- 481
names      <- data.names()

# set my move index
mi = 0


######################
# Substitution Model #
######################

"Setting up the substitution model"

pi_prior <- rep(1,20)
pi_root ~ dnDirichlet(pi_prior)
moves[++mi] = mvSimplexElementScale(pi_root,weight=3)

er_prior <- rep(1, 190)
er ~ dnDirichlet(er_prior)
moves[++mi] = mvSimplexElementScale(er,weight=5)

# create the mixture elements
for (i in 1:num_mixtures) {
   pi[i] ~ dnDirichlet(pi_prior)
   moves[++mi] = mvSimplexElementScale(pi[i], weight=1.0)
   Q_mixture[i] := fnGTR(er,pi[i])
}

mixture_probs <- simplex(rep(1, num_mixtures))
for (i in 1:n_branches) {
   # This currently doesn't work
   # branch_model_index[i] ~ dnCategorical(mixture_probs)
   # moves[++mi] = mvRandomIntegerWalk(branch_model_index[i], weight=1.0)
   #
   # Q[i] := Q_mixture[branch_model_index[i]]

   # We could also use instead
   Q[i] ~ dnMixture(Q_mixture,mixture_probs)
   moves[++mi] = mvMixtureAllocation(Q[i], weight=1.0)
}



#############################
# Among Site Rate Variation #
#############################

"Rate variability across sites"


# among site rate variation, +Gamma4
alpha_prior_mean <- ln(2.0)
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal( alpha_prior_mean, alpha_prior_sd )
sr := fnDiscretizeGamma( alpha, alpha, 4, false )
moves[++mi] = mvScale(alpha, lambda=1.0, weight=2.0)


# the probability of a site being invariable, +I
p_inv ~ dnBeta(1,1)
moves[++mi] = mvBetaProbability(p_inv, weight=1.0)



##############
# Tree model #
##############

"Specifying the tree model"

# Specify a prior on the diversification and turnover rate
diversification ~ dnGamma(5,1)
turnover ~ dnGamma(5,1)

# now transform the diversification and turnover rates into speciation and extinction rates
speciation := diversification + turnover
extinction := turnover

# specify a prior on the root age (our informed guess is about 75-80 mya) 4500
rootAge ~ dnNormal(4500.0,100.0) 

sampling_fraction <- Probability( 1 / 10000000 ) 

# create some moves that change the stochastic variables
# all moves are sliding proposals but you could use scaling proposals for the rates too
moves[++mi] = mvSlide(diversification,delta=1,tune=true,weight=1)
moves[++mi] = mvSlide(turnover,delta=1,tune=true,weight=1)
moves[++mi] = mvSlide(rootAge,delta=1,tune=true,weight=1)

# construct a variable for the tree drawn from a birth death process
psi ~ dnBirthDeath(lambda=speciation, mu=extinction, rho=sampling_fraction, rootAge=abs(rootAge), samplingStrategy="diversified", condition="nTaxa", taxa=names )

# use a good starting tree

starting_tree.rescale(rootAge / starting_tree.rootAge() )

psi.setValue(starting_tree)

#moves[++mi] = mvNarrow(psi, weight=5.0)
#moves[++mi] = mvNNI(psi, weight=1.0)
#moves[++mi] = mvFNPR(psi, weight=3.0)
moves[++mi] = mvSubtreeScale(psi, weight=1.0)
moves[++mi] = mvNodeTimeSlideUniform(psi, weight=1.0)



###############
# Clock Model #
###############

"Setting up the strict clock"

# We estimate the clock rate which should be around 0.01 (=1%) per million years per site

logClockRate ~ dnUniform(-8,0)
moves[++mi] = mvSlide(logClockRate,delta=1,tune=true,weight=1.0)
clockRate := 10^logClockRate


###################
# PhyloCTMC Model #
###################

"Setting up the PhyloCTMC"

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, siteRates=sr, pInv=p_inv, rootFrequencies=pi_root, branchRates=clockRate, type="protein")

# attach the data
seq.clamp(data)


#############
# THE Model #
#############

"Creating the model"

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)


"Adding monitors"

monitors[1] = mnModel(filename="./" + analysis_name + ".log",printgen=100, separator = TAB)
monitors[2] = mnFile(filename="./" + analysis_name + ".trees",printgen=100, separator = TAB, psi)
monitors[3] = mnScreen(printgen=100, diversification, turnover, rootAge, clockRate)

"Ancestral state reconstruction monitor:"
monitors[3] = mnJointConditionalAncestralState(filename="./" + analysis_name + "ASR_joint.log", printgen=10, tree=psi, ctmc=seq, type="Protein", withStartStates=FALSE, append=FALSE, withTips=TRUE)

"Instantiating the MCMC"

mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=200,tuningInterval=10)
mymcmc.run(generations=1000)

q()
